# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application
env:
  AWS_REGION: eu-central-1
  COMMIT_SHA: ${{ github.sha }}           
  ECR_REPOSITORY: recommendationservice,emailservice,loadgenerator
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
permissions:
  contents: read

jobs:
  # build:

  #   runs-on: ubuntu-latest

  #   steps:
  #   - uses: actions/checkout@v4
  #   - name: Set up Python 3.10
  #     uses: actions/setup-python@v3
  #     with:
  #       python-version: "3.x"
  #   - name: Install dependencies
  #     run: |
  #       python -m pip install --upgrade pip
  #       pip install pytest
  #       if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
  #   # - name: Lint with flake8
  #   #   run: |
  #   #     # stop the build if there are Python syntax errors or undefined names
  #   #     flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
  #   #     # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
  #   #     flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
  #   - name: Test with pytest
  #     run: |
  #       pytest

  deploy:
    name: Deploy
    environment: staging
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repo: [recommendationservice, emailservice, loadgenerator]
    permissions:
      contents: read
    #needs: build
    steps:
    - 
      name: Checkout
      uses: actions/checkout@v4
    - 
      name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        #role-to-assume: arn:aws:iam::123456789012:role/my-github-actions-role OR
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    - 
      name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      with:
        mask-password: 'true'
    - 
      name: Build and tag image
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      # run: |
      #     pushd app-source-code/${{ matrix.repo }}
      #     echo "Building Docker Image"
      #     docker build -t $ECR_REGISTRY/${{ matrix.repo }}:$COMMIT_SHA .
      #     docker build -t $ECR_REGISTRY/${{ matrix.repo }}:stg .
      #     popd

      run: |
        echo "Building Docker Image fOR repositories: $ECR_REPOSITORY"
        IFS="," read -r -a REPOSITORIES  <<< "$ECR_REPOSITORY"
        for repo in "${REPOSITORIES[@]}"; do
          echo "Building Docker Image for $repo"
           pushd app-source-code/$repop
          docker build -t $ECR_REGISTRY/$repo:$COMMIT_SHA .
          docker build -t $ECR_REGISTRY/$repo:stg .
        done
    - 
      name: Run Trivy vulnerability scanner
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.ECR_REGISTRY }}/${{ matrix.repo }}:stg'
        format: 'table'
        #exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'
    - 
      name: Push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      # run: |
      #   echo "Pushing Docker Image"
      #   docker push $ECR_REGISTRY/${{ matrix.repo }}:$COMMIT_SHA .
      #   docker push $ECR_REGISTRY/${{ matrix.repo }}:stg .

      run: |
        echo "Pushing Docker Image for repositories: $ECR_REPOSITORY"
        IFS="," read -r -a REPOSITORIES  <<< "$ECR_REPOSITORY"
        for repo in "${REPOSITORIES[@]}"; do
          echo "Pushing Docker Image for $repo"
          docker push $ECR_REGISTRY/$repo:$COMMIT_SHA
          docker push $ECR_REGISTRY/$repo:stg
        done
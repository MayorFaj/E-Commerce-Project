name: Continuous Integration Workflow

env:
  AWS_REGION: eu-central-1               
  ECR_REPOSITORY: ad-service

#This request is triggered whenever a new PR is created on the main branch
on:
  workflow_dispatch:
  # push:
  #   branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
    - uses: actions/checkout@v4 
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
    # Configure Gradle for optimal use in GiHub Actions, including caching of downloaded dependencies.
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
    - name: Test with Gradle Wrapper
      run: |
        chmod +x ./gradlew
        echo "Running unit tests"
        ./gradlew test --warning-mode all

  dependency-submission:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    - name: Generate and submit dependency graph
      uses: gradle/actions/dependency-submission@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

  deploy:
    name: Deploy
    environment: staging
    runs-on: ubuntu-latest
    permissions:
      contents: read
    needs: ['build', 'dependency-submission']

    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        #role-to-assume: arn:aws:iam::123456789012:role/my-github-actions-role OR
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      with:
        mask-password: 'true'
    - name: Build and tag image
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        COMMIT_SHA: ${{ github.sha }}    
      run: |
        echo "Building Docker Image"
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$COMMIT_SHA .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:stg .
    - name: Run Trivy vulnerability scanner
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        COMMIT_SHA: ${{ github.sha }}
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:stg'
        format: 'table'
        #exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'
    - name: Push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        COMMIT_SHA: ${{ github.sha }}
      run: |
        echo "Pushing Docker Image"
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$COMMIT_SHA
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:stg








#https://github.com/aws-actions/configure-aws-credentials#sample-iam-role-cloudformation-template
#https://github.com/aws-actions/amazon-ecr-login#docker-credentials
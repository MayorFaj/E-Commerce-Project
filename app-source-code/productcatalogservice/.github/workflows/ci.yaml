name: Go 

env:
  AWS_REGION: eu-central-1               
  ECR_REPOSITORY: product_catalog-service

on:
  # push:
  #   branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
    - 
      uses: actions/checkout@v4

    # Restore cache at the beginning of the workflow
    - 
      name: Restore Cache
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - 
      name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.20'

    - 
      name: Build
      run: go build -v ./...

    - 
      name: Test
      run: go test -v ./...

  deploy:
    name: Deploy
    environment: staging
    runs-on: ubuntu-latest
    permissions:
      contents: read
    needs: build

    steps:
    - 
      name: Checkout
      uses: actions/checkout@v4

    - 
      name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        #role-to-assume: arn:aws:iam::123456789012:role/my-github-actions-role OR
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - 
      name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      with:
        mask-password: 'true'

    - 
      name: Build and tag image
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        COMMIT_SHA: ${{ github.sha }}    
      run: |
        echo "Building Docker Image"
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$COMMIT_SHA .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:stg .
    - 
      name: Run Trivy vulnerability scanner
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:stg'
        format: 'table'
        #exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'

    - 
      name: Push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        COMMIT_SHA: ${{ github.sha }}
      run: |
        echo "Pushing Docker Image"
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$COMMIT_SHA
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:stg
